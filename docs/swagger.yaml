definitions:
  models.Categories:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
    type: object
  models.Category:
    properties:
      category_id:
        type: integer
      name:
        type: string
    type: object
  models.CreateCategoryRequest:
    properties:
      name:
        type: string
    type: object
  models.CreateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  models.CreateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  models.Customer:
    properties:
      address:
        type: string
      customer_id:
        type: integer
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  models.Customers:
    properties:
      customers:
        items:
          $ref: '#/definitions/models.Customer'
        type: array
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      description:
        type: string
      price:
        type: number
      product_id:
        type: integer
      stock:
        type: integer
    type: object
  models.Products:
    properties:
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: Wellcome to the Micopia Web Server Swagger Documentation
  title: Micopia Swagger Documentation
  version: "1.0"
paths:
  /CategoryCRUD/createCategory:
    put:
      description: Create Category in the database
      parameters:
      - description: The Category to create
        in: body
        name: CreateCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
      tags:
      - Category
  /CategoryCRUD/deleteCategory:
    delete:
      description: Delete Category in the database
      parameters:
      - description: The Category identifier
        in: query
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            type: string
      tags:
      - Category
  /CategoryCRUD/getCategories:
    get:
      description: Get All Categories from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Categories'
      tags:
      - Category
  /CategoryCRUD/getCategory:
    get:
      description: Get Category from the database by id
      parameters:
      - description: The Category identifier
        in: query
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      tags:
      - Category
  /CategoryCRUD/updateCategory:
    post:
      description: Update Category in the database
      parameters:
      - description: The Category to update
        in: body
        name: UpdateCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      tags:
      - Category
  /CustomerCRUD/createCustomer:
    put:
      description: Create Customer in the database
      parameters:
      - description: The Customer to create
        in: body
        name: CreateCustomerRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Customer'
      tags:
      - Customer
  /CustomerCRUD/deleteCustomer:
    delete:
      description: Delete Customer in the database
      parameters:
      - description: The Customer identifier
        in: query
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Customer deleted successfully
          schema:
            type: string
      tags:
      - Customer
  /CustomerCRUD/getCustomer:
    get:
      description: Get Customer from the database by id
      parameters:
      - description: The Customer identifier
        in: query
        name: customerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
      tags:
      - Customer
  /CustomerCRUD/getCustomers:
    get:
      description: Get All Customers from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customers'
      tags:
      - Customer
  /CustomerCRUD/updateCustomer:
    post:
      description: Update Customer in the database
      parameters:
      - description: The Customer to update
        in: body
        name: UpdateCustomerRequest
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
      tags:
      - Customer
  /ProductCRUD/createProduct:
    put:
      description: Create Product in the database
      parameters:
      - description: The Product to create
        in: body
        name: CreateProductRequest
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
      tags:
      - Product
  /ProductCRUD/deleteProduct:
    delete:
      description: Delete Product in the database
      parameters:
      - description: The product identifier
        in: query
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: deleted
          schema:
            type: string
      tags:
      - Product
  /ProductCRUD/getProduct:
    get:
      description: Get Product from the database by id
      parameters:
      - description: The product identifier
        in: query
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      tags:
      - Product
  /ProductCRUD/getProducts:
    get:
      description: Get All Products from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Products'
      tags:
      - Product
  /ProductCRUD/updateProduct:
    post:
      description: Update Product in the database
      parameters:
      - description: The Product to update
        in: body
        name: UpdateProductRequest
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      tags:
      - Product
swagger: "2.0"
